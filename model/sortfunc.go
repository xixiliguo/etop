// Code generated by model/sort.go; DO NOT EDIT.

package model

var SortMap = map[string]sortFunc{
	"Pid":                      SortByPid,
	"Comm":                     SortByComm,
	"State":                    SortByState,
	"Ppid":                     SortByPpid,
	"NumThreads":               SortByNumThreads,
	"StartTime":                SortByStartTime,
	"OnCPU":                    SortByOnCPU,
	"CmdLine":                  SortByCmdLine,
	"User":                     SortByUser,
	"System":                   SortBySystem,
	"Priority":                 SortByPriority,
	"Nice":                     SortByNice,
	"CPU":                      SortByCPU,
	"MinFlt":                   SortByMinFlt,
	"MajFlt":                   SortByMajFlt,
	"VSize":                    SortByVSize,
	"RSS":                      SortByRSS,
	"Mem":                      SortByMem,
	"Rchar":                    SortByRChar,
	"Wchar":                    SortByWChar,
	"ReadCharPerSec":           SortByReadCharPerSec,
	"WriteCharPerSec":          SortByWriteCharPerSec,
	"SyscR":                    SortBySyscR,
	"SyscW":                    SortBySyscW,
	"SyscRPerSec":              SortBySyscRPerSec,
	"SyscWPerSec":              SortBySyscWPerSec,
	"ReadBytes":                SortByReadBytes,
	"WriteBytes":               SortByWriteBytes,
	"CancelledWriteBytes":      SortByCancelledWriteBytes,
	"ReadBytePerSec":           SortByReadBytePerSec,
	"WriteBytePerSec":          SortByWriteBytePerSec,
	"CancelledWriteBytePerSec": SortByCancelledWriteBytePerSec,
	"Disk":                     SortByDisk,
}

func SortByPid(i, j Process) bool {
	return i.Pid > j.Pid
}

func SortByComm(i, j Process) bool {
	return i.Comm > j.Comm
}

func SortByState(i, j Process) bool {
	stodesc := map[string]string{
		"R": "Running",
		"S": "Sleeping",
		"D": "Uninterruptible",
		"I": "Idle",
		"Z": "Zombie",
		"T": "Stopped",
		"t": "Tracing stop",
		"X": "Dead",
		"x": "Dead",
		"K": "Wakekill",
		"W": "Waking",
		"P": "Parked",
	}
	return stodesc[i.State] > stodesc[j.State]
}

func SortByPpid(i, j Process) bool {
	return i.Ppid > j.Ppid
}

func SortByNumThreads(i, j Process) bool {
	return i.NumThreads > j.NumThreads
}

func SortByStartTime(i, j Process) bool {
	return i.StartTime > j.StartTime
}

func SortByOnCPU(i, j Process) bool {
	return i.OnCPU > j.OnCPU
}

func SortByCmdLine(i, j Process) bool {
	return i.CmdLine > j.CmdLine
}

func SortByUser(i, j Process) bool {
	return i.User > j.User
}

func SortBySystem(i, j Process) bool {
	return i.System > j.System
}

func SortByPriority(i, j Process) bool {
	return i.Priority > j.Priority
}

func SortByNice(i, j Process) bool {
	return i.Nice > j.Nice
}

func SortByCPU(i, j Process) bool {
	return i.CPU > j.CPU
}

func SortByMinFlt(i, j Process) bool {
	return i.MinFlt > j.MinFlt
}

func SortByMajFlt(i, j Process) bool {
	return i.MajFlt > j.MajFlt
}

func SortByVSize(i, j Process) bool {
	return i.VSize > j.VSize
}

func SortByRSS(i, j Process) bool {
	return i.RSS > j.RSS
}

func SortByMem(i, j Process) bool {
	return i.Mem > j.Mem
}

func SortByRChar(i, j Process) bool {
	return i.RChar > j.RChar
}

func SortByWChar(i, j Process) bool {
	return i.WChar > j.WChar
}

func SortByReadCharPerSec(i, j Process) bool {
	return i.ReadCharPerSec > j.ReadCharPerSec
}

func SortByWriteCharPerSec(i, j Process) bool {
	return i.WriteCharPerSec > j.WriteCharPerSec
}

func SortBySyscR(i, j Process) bool {
	return i.SyscR > j.SyscR
}

func SortBySyscW(i, j Process) bool {
	return i.SyscW > j.SyscW
}

func SortBySyscRPerSec(i, j Process) bool {
	return i.SyscRPerSec > j.SyscRPerSec
}

func SortBySyscWPerSec(i, j Process) bool {
	return i.SyscWPerSec > j.SyscWPerSec
}

func SortByReadBytes(i, j Process) bool {
	return i.ReadBytes > j.ReadBytes
}

func SortByWriteBytes(i, j Process) bool {
	return i.WriteBytes > j.WriteBytes
}

func SortByCancelledWriteBytes(i, j Process) bool {
	return i.CancelledWriteBytes > j.CancelledWriteBytes
}

func SortByReadBytePerSec(i, j Process) bool {
	return i.ReadBytePerSec > j.ReadBytePerSec
}

func SortByWriteBytePerSec(i, j Process) bool {
	return i.WriteBytePerSec > j.WriteBytePerSec
}

func SortByCancelledWriteBytePerSec(i, j Process) bool {
	return i.CancelledWriteBytePerSec > j.CancelledWriteBytePerSec
}

func SortByDisk(i, j Process) bool {
	return i.Disk > j.Disk
}
