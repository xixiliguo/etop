//go:build ingore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
)

var RenderAndField = []struct {
	Render string
	Field  string
}{
	{"Pid", "Pid"},
	{"Comm", "Comm"},
	{"State", "State"},
	{"Ppid", "Ppid"},
	{"NumThreads", "NumThreads"},
	{"StartTime", "StartTime"},
	{"OnCPU", "OnCPU"},
	{"CmdLine", "CmdLine"},
	{"User", "User"},
	{"System", "System"},
	{"Priority", "Priority"},
	{"Nice", "Nice"},
	{"CPU", "CPU"},
	{"MinFlt", "MinFlt"},
	{"MajFlt", "MajFlt"},
	{"VSize", "VSize"},
	{"RSS", "RSS"},
	{"Mem", "Mem"},
	{"Rchar", "RChar"},
	{"Wchar", "WChar"},
	{"ReadCharPerSec", "ReadCharPerSec"},
	{"WriteCharPerSec", "WriteCharPerSec"},
	{"SyscR", "SyscR"},
	{"SyscW", "SyscW"},
	{"SyscRPerSec", "SyscRPerSec"},
	{"SyscWPerSec", "SyscWPerSec"},
	{"ReadBytes", "ReadBytes"},
	{"WriteBytes", "WriteBytes"},
	{"CancelledWriteBytes", "CancelledWriteBytes"},
	{"ReadBytePerSec", "ReadBytePerSec"},
	{"WriteBytePerSec", "WriteBytePerSec"},
	{"CancelledWriteBytePerSec", "CancelledWriteBytePerSec"},
	{"Disk", "Disk"},
}

func main() {
	outputFile, _ := os.OpenFile("sortfunc.go", os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
	defer outputFile.Close()
	buff := bytes.NewBuffer(nil)
	buff.WriteString(`// Code generated by model/sort.go; DO NOT EDIT.

	package model
	
	`)
	buff.WriteString("var SortMap = map[string]sortFunc{\n")
	for _, info := range RenderAndField {
		c := fmt.Sprintf("	%q:  SortBy%s,\n", info.Render, info.Field)
		buff.WriteString(c)
	}
	buff.WriteString("}\n")
	for _, info := range RenderAndField {
		c := fmt.Sprintf(`
			func SortBy%s(i, j Process) bool {
				return i.%s > j.%s
			}
			`, info.Field, info.Field, info.Field)
		if info.Field == "State" {
			c = fmt.Sprintf(`
			func SortBy%s(i, j Process) bool {
				stodesc := map[string]string{
					"R": "Running",
					"S": "Sleeping",
					"D": "Uninterruptible",
					"I": "Idle",
					"Z": "Zombie",
					"T": "Stopped",
					"t": "Tracing stop",
					"X": "Dead",
					"x": "Dead",
					"K": "Wakekill",
					"W": "Waking",
					"P": "Parked",
				}
				return stodesc[i.%s] > stodesc[j.%s]
			}
			`, info.Field, info.Field, info.Field)
		}
		buff.WriteString(c)
	}
	buff.Bytes()
	formarted, _ := format.Source(buff.Bytes())
	outputFile.Write(formarted)
}
